package br.com.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;



import br.com.factory.ConnectionFactory;
import br.com.model.Person;



public class PersonDAO {


	public void save (Person person) {

		String sql = "INSERT INTO person (nome, cpf, saldo) VALUES (?, ?, ?)";
		Connection conn = null;

		PreparedStatement pstm = null;

		try {
    
			conn = ConnectionFactory.createConnectionToPostgreSQL();

			pstm = (PreparedStatement) conn.prepareStatement(sql);

			PreparedStatement st = conn.prepareStatement("INSERT INTO person VALUES (?)");

			pstm.setString(1, person.getNome());
			pstm.setString(2, person.getCpf());
			pstm.setDouble(3, person.getSaldo());

			pstm.execute();
			System.out.println("Dados salvos com sucesso!");
			System.out.println("Nome: " + person.getNome() + 
					"\nCPF: " + person.getCpf() + 
					"\nSaldo: " + person.getSaldo() );

		} catch (Exception e) {
			e.printStackTrace();

		} finally {

try {

				if(pstm != null) {
					pstm.close();

				}

				if(conn != null) {
					conn.close();

				}

			} catch (Exception e) {
				e.printStackTrace();

			}

		}
	}

	public List<Person> getPersons() {

		String sql = "Select * from person";

		List<Person> persons = new ArrayList<Person>();

		Connection conn = null;
		PreparedStatement pstm = null;
		ResultSet rset = null;

		try {

			conn = ConnectionFactory.createConnectionToPostgreSQL();

			pstm = (PreparedStatement) conn.prepareStatement(sql);

			rset = pstm.executeQuery();

			System.out.println("Persons registered: ");

			while (rset.next()) {
				Person person = new Person();

				person.setNome(rset.getString("nome"));
				System.out.println("\nNome: " + person.getNome());
		
				person.setCpf(rset.getString("cpf"));
				System.out.println("\nCPF: " + person.getCpf());
		
				person.setSaldo(rset.getDouble("saldo"));
				System.out.println("\nSaldo: " + person.getSaldo());
				persons.add(person);

			} 

		} catch (Exception e) {
			e.printStackTrace();

		} finally {

			try {

				if (rset != null) {
					rset.close();
				}

				if (pstm != null) {
					pstm.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				e.printStackTrace();

			}

		}
		return persons;
	}

	public void update (Person person) {
		String sql = "UPDATE person SET nome = ?, "
				+ "SET cpf = ?, "
				+ "SET saldo = ? "
				+ "WHERE id = ?";
		
			Connection conn = null;
			PreparedStatement pstm = null;
			
			try {
				conn = ConnectionFactory.createConnectionToPostgreSQL();
				
				pstm = conn.prepareStatement(sql);
				
				pstm.setString(1, person.getNome());
				pstm.setString(2, person.getCpf());
				pstm.setDouble(3, person.getSaldo());
				
				pstm.setInt(4, person.getId());
				
				pstm.execute();
				
				
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					if (pstm != null) {
						pstm.close();
					}
					if (conn != null) {
						conn.close();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				
				
			}
			
		}
	
		
	
	public void delete (Person person) {

	}
}
